@startuml
abstract class Shape{
	# origin : Point
	# name : Text
	
	# {abstract} area() : Double
	# {abstract} perimeter() : Double
	# {abstract} volume() : Double 
	
	# getOrigin() : Point
	# getName() : String
	# distance(other : Shape) : Double
	# distance(a: Shape, b : Shape) : Double
	# move(dx : Double, dy : Double) : void
}

class Text{
	- text : String
}

class Point{
	- colour : Colour
	- xCoordinate: Double
	- yCoordinate: Double
	
	+ distance(other : Point) : Double
	+ {static} distance(that : Point, other : Point) : Double
}

class Colour{
	- colour : String
}

class Circle{
	- radius : Double
	
	+ area() : Double
	+ perimeter() : Double
	+ volume() : Double
}

class Rectangle{
	# width : Double
	# length : Double
	
	# area() : Double
	# perimeter() : Double
	# volume() : Double
}

class Prism{
	- height : Double
	
	+ height() : Double
	+ area() : Double
	+ perimeter() : Double
	+ volume() : Double
}

class Geometry{
	- shapes : TreeSet<Shape>
	+ {static} main(args : String[]) : void
}

Text "1" --* "1" Shape : has-a
Point "1..*" --* "1" Shape : has-a
Point "1" *-- "1" Colour : has-a
Shape <|-- Rectangle : is-a
Shape <|-- Circle : is-a
Rectangle <|-- Prism : is-a
Shape "0..*" <-- "1" Geometry : uses
@enduml